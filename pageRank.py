import numpy as np
import json


#read input file.
# link=[]
# with open("./summary.json","r") as f:
#   link=json.load(f)
link=[[16,25,86,110,173,202,261,271,282,289],[7,58,107,181],[40,48,98,148,197,206,219,234],[79,156,172,265,283],[13,35,75,164,171,236],[11,38,117,144,194,205,284],[57,230,233,262],[243,276],[81,87,157,234],[87,157,175,225],[9,74,76,116,130,200,240,270],[46,119,175,278,291],[5,19,57,119,134,178,203,212,225,234,291],[152,160,212,291],[7,97,182,183,201,239,243,253,298],[131,254,287],[33,225,251,299],[19,140,203,214],[133,195,234],[24,26,28,35,55,83,136,245],[55,109,122,160,236,271],[152,184,239,248,266,267,294],[78,100,297],[0,32,33,42,92,105,109,198,241,281],[50,123,213,222],[5,17,69,141,211,235,237],[43,45,46,74,191,201,224,277,280,284,292,294],[9,71,96,180,235,260],[151],[3,24,58,65,90,93,131,198,257],[264,275,291],[33,99,102,112,290,298],[96,215,227,252,255],[74,86,90,96,112,133,188,210],[11,40,154,158,191,202,253,265],[16,42,105,143,145,204,266],[124,157,198,231,241,269],[32,33,50,86,105,229,234],[1,50,104,118,137,144,149,260],[14,40,47,106,183,191],[25,33,69,73,76,109,110,138,169,171],[3,17,100,102,151,169,194,261,298],[63,137,143,204,262,268],[18,81,206,281,292],[52,165,166],[38,48,72,87,188,285],[131,147,234,285,297],[92,95,143,155,224,266],[61,189,190,203],[39,92],[31,120,139,192,198,238,248],[11,53,61,114,123],[48,95,103,114,129,160],[39,216,258,268],[17,35,210,229,243,257,263,287],[19,34,61,81,144,160,180],[63,110,141,143,170,191,195,239],[1,75,151,268],[110,152,155,167,180,286],[2,132,155,184,215,227,264],[1,107,139,164,166,167,233,249,271,283,292],[71,96,142,162,205,226,235],[94,120,272,283],[26,57,86,100,121,174,227,247,274],[12,174,255,297],[11,15,79,80,131,145,150,161,178,214],[155,177,205],[36,61,104,145,261,273,278],[3,62,108,180,269],[171,189,232,244],[10,209,231,297],[16,121,161,223,241,259,265],[4,148,180,238,259,291],[28,44,64,278],[209,255,289],[166,291],[47,58,85,90,183,222,229],[7,148,266],[0,66,141,174,209,220,246,271,291],[8,27,50,109,127,132,140,294],[2,5,80,90,117,124,254,289,293],[8,132],[58,65,212,215,253,272,276],[3,49,147,165],[0,69,78,102,109,183,242,298],[47,71,124,183,207,284],[46,49,141,178,285],[9,43,96,124,127,170,180],[81,89,206,237],[28,34,55,138,170,242,248],[235,240,297],[273,293],[59,216,230,280],[32,59,88,104,122,131,186,195,214,226,290,299],[4,60,72,111,290],[29,32,62,119,162,187],[4,32,46,164,177,213,262],[30,41,49,52,66,165,195,291],[1,7,38,58,87,140,184,198,225,271],[10,35,48,133,136,154,281],[76,106,188,260,292],[25,133,145,192,219,254,276],[70,101,112,224,232,279],[1,69,119,160],[87],[12,25,53,97,127,138,255,259],[112,126,177,179,194,247],[41,50,53,56,62,154,171,259,292],[6,45,231,275,288],[77,85,102,183],[34,59,169,179,239,241],[94,119,161,168,250,254,265,269,289],[120,135,221,270],[80,102,186,198,252],[16,87,180,246],[61,108,244,273],[12,14,61,156,171],[8,31,41,89,160,162,224,239],[56,81,166,287],[11,126,128,139,168,199,229,286,288],[19,24,70,119,262,269,280,294],[21,38,159,256],[63,68,120,165,191,211,252,278,282],[37,57,166,205,227,237,299],[18,41,42,79,118,138,146,208,250],[24,106,107,120,212,237],[43,53,77,154,264,271],[60,83,119,136,152,154,197,208,210,216,253,256,261,271],[214,254,257,270,277,290],[25,30,74,89,137,160,250],[68,125,231,253],[3,80,97,130,142,146,217,232,259],[150,217,220],[7,14,121,198,244,268],[29,127,135,138,168,173,202,231],[136,164,166,248],[93,112,118,194,201,206,222,246],[55,127,267],[25,61,70,134,143,158,203,219,233,260,289],[19,63,101,148,175],[38,196,216,248],[41,54,70,75,82,161,167,221,263,282],[34,173,189,222,249,277,278],[32,41,51,137,179,185,260,280],[93,143,152,162,176,188,244],[31,151],[62,143,175,190,194],[72,76,125,153,168,175,240,297],[146,153,187,216],[8,20,24,26,31,43,99,224,237,294],[0,10,16,77,230],[1,28,29,54,105,118,138,151,271,288],[1,64,130,155,221,223,224,288],[53,57,152,178],[16,103,104,122,143],[53,100,172,201,208],[7,74,200,202,285],[107,223],[51,62,79,155,177,245],[72,119,148,185,197,220,251,275],[83,127],[7,26,77,78,101,102,120,126,162,186,246],[53,96,233,243],[0,15,30,50,57,86,198,280],[0,100,136,150,164,188,228,288],[16,81,104,131,231,283],[41,42,70,123,136,159],[0,149,153,258,292],[31,33,68,216,244,294],[59,63,122,196,231,242,281],[7,46,151],[47,53,69,137,173,205],[57,61,141,276],[152,191,214],[130,177,187,192,268],[7,35,37,45,81,142,192,210,217,230,262],[47,56,110,142,180,277],[36,42,55,255],[0,18,20,22,31,42,121,183,239,253],[25,51,161,220,221,254],[38,50,56,65,88,122,159,228,274],[83,97,121,126,175,179,205,215,266,268,273],[264],[1,60,80,81,186],[32,96,271],[189,219,243,249,270,290],[26,38,125],[10,22,55,99,147,192,252],[117,124,157,198,199,233,248,279,288],[102,148,159],[120,215,232,259],[7,9,63,69,88,97,123,184],[11,22,39,114,145,184,222,228,266,275],[107,174,253,269,290],[11,16,24,146,266,286],[40,44,47,115,119,145,158,162,225,226],[11,25,40,111,143,188],[14,30,51,226,235],[73,150],[20,54,126,190],[1,36,41,95,221],[105,131,175,218,274,284],[20,81,88,147,199,209,242,253,262,267,270],[42,57,125,160,215,222,247,249,256],[15,27,40,63,117,131,148,214,225,291],[13,82,98,223,232,275,292],[40,66,181,183,191,201,262,285],[31,35,74,150,156,159,225,230],[7,46,71,181],[13,130,133,160,166,172,245],[41,92,96,103,138,142,197,237,245,278],[72,239,249],[21,49,108,112,152,187,209,216,234,289],[28,35,130,183],[64,76,79,147,229,244,257,259],[12,56,229,290],[2,14,73,115],[44,51],[24,110],[19,78,140,174],[43,67,88,93,115,119,133,229,293],[10,197],[66,215,264,271],[4,54,100,124,147,167,184,255,275],[138,172,204,268],[15,96,102,208,244,273],[4,20,102,112,145,201],[0,43,88,112,146,218,238,291],[53,82,93,119,198,210,245],[62,93,159],[0,31,43,47,67,118,121,162,286],[109,199,200,241],[7,18,242,298],[69,120,170,216,218,269,271,284],[24,51,175,264,297],[5,27,69,170,174,206,211,212,224],[3,101,135,142,162,225],[4,24,50,61,104,233,268],[56,177,262,271],[21,47,75,107,174,216,231,283],[21,83,86,177,183,188,215,234,279],[19,48,57,142,239,240,269,288],[104,129,154,170,199,243,297],[0,58,61,121,163,164,188,220,257,287],[23,148,151,257,299],[59,60,70,74,86,146,196,255,280],[102,143,175,273],[13,15,113,138,145,173,188,228],[28,133,176,180,217,270,292],[1,12,142,218,227,236],[55,106,117,120,274,282],[21,68,69,88,112,217,235,261],[12,39,72,259],[129,130,145,158,162,179,205,223,247],[46,172,196,229,294],[89,91,110,144,198],[87,142,168,227,234],[76,148,296],[3,159,162,257],[52,83,131,166,208,252,280],[18,23,57,69,120,221],[34,123,193,218,290],[37,52,65],[10,82,112,118,135,152,165,246,294],[31,47,63,111,113,152,165,203,246],[7,11,66,90,160,246],[0,21,47,49,88,140,141,145,157,160,202],[50,65,137,190,296],[22,127,157,234,265],[26,44,53,57,84,160,268,287],[35,86,101,165,172,225],[18,58,141,173,277],[88,91,95,100,115,140,202,206],[3,34,56,109,164,223,245,266],[29,73,88,93,113,144,171,224,249,271,276,291],[75,186,206,263],[27,49,50,155,180,234,282],[0,34,85,106,113,244],[22,52,54,66,97,198,286],[70,76,104,108,141,142,162,252],[16,43,67,144,166],[72,149,195,201,226,237,260,263],[8,108,123,135],[10,77,130,171,194,274,281],[10,65,154,184],[52,117,125,193,194,202,210,271,286],[8,16,74,83,154,176],[10,85,105,108,140,157,172,207],[25,45,70,105,111,205,234,236,246,274],[22,47,291],[4,30,33,51,90,119,153,211],[46,72,105,113,128,173,240,258],[52,53,63,130,187,195,196,203,212,222],[25,35,90,91,116,130,208,228,238,260,267],[18,54,70,71,114,211,299],[64,113,164,247],[20,88,117,156,167,207,283],[3,111,123,171,177,217,273,280],[29,41,82,101,124,175,198,210,256],[14,80,197,210,247,253]]
#initialize original transition matrix
original_transition=np.zeros((len(link),len(link)))
for i in range(len(link)):
  for o in link[i]:
    # print(o)
    original_transition[i][o]=1

#normalize original transition matrix, avoid divide by 0.
totalLink=np.sum(original_transition,axis=0)
for i in range(len(link)):
    if(totalLink[i]==0):
        totalLink[i]=1
original_transition=original_transition/totalLink

print("Original transition matrix",original_transition)

initial_vector=np.ones((len(link),1))/len(link)
# ordering_of_websites=np.zeros(len(link))
##########

#Todo: please implement pagerank algorithm and turn ordering_of_websites into a list representing the web pages. The order should be based on pagerank algorithm. The web page with a higher probability comes first.
others_contacts = np.ones((len(link), len(link)))/len(link)
# print(others_contacts)
M = 0.15 * others_contacts + 0.85 * original_transition
for i in range(50):
	initial_vector = M @ initial_vector
# print(initial_vector)
# print(M @ initial_vector)

ordering_of_websites = list(initial_vector.T[0])
# print(type(ordering_of_websites.tolist()))
ref_list = sorted(ordering_of_websites)
# print(ref_list)
for i in range(len(link)):
	ordering_of_websites[ordering_of_websites.index(ref_list[i])] = 299 - i

##########
# print(type(original_transition))
print("Your current answer",ordering_of_websites)

#turn your answer from a numpy array to list and output it as a json file.
# ordering_of_websites=ordering_of_websites.tolist()
with open("answer.json","w") as f:
    json.dump(ordering_of_websites,f)
