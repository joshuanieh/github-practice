type Query {
    message(input: MessageQueryInput!): [Message!]!
}

type Mutation {
    createMessage(input: CreateMessageMutationInput!): [Message!]!
    deleteMyMessages(input: DeleteMyMessagesMutationInput!): [Message!]!
}

type Subscription {
    message(input: MessageSubscriptionInput): MessageSubscriptionPayload!
}

input MessageQueryInput {
    user: String!
    receiver: String!
}

input CreateMessageMutationInput {
    user: String!
    receiver: String!
    body: String!
}

input DeleteMyMessagesMutationInput {
    user: String!
    receiver: String!
}

input MessageSubscriptionInput {
    user: String!
    receiver: String!
}

type MessageSubscriptionPayload {
    mutation: MutationType!
    data: [Message!]!
}

enum MutationType {
    CREATED
    DELETED
}

type Message {
    _id: ID!
    user: String!
    receiver: String!
    body: String!
}