type Query {
	"Query out the number of messages by the name of the speeker."
	message(name: String!): [Message!]
	messages: [Message!]
}

type Message {
	emitter: String!
	collector: String!
	body: String!
}

type Mutation {
	createMessage(input: CreateMessageInput): Message!
	updateMessage(input: UpdateMessageInput): Message
	deleteMessage(collector: String!): Message
}


input CreateMessageInput {
	emitter: String!
	collector: String!
	body: String!
}

input UpdateMessageInput {
	emitter: String!
	collector: String!
	body: String!
	newBody: String!
}

type Subscription {
	message(collector: String!): SubscriptionPayload!
}

enum MutationType {
	CREATED
	UPDATED
	DELETED
}

type SubscriptionPayload {
	mutation: MutationType!
	data: Message
}